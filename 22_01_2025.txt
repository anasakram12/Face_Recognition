Without auto database adding


from flask import Flask, request, jsonify
import os
import cv2
import pickle
import numpy as np
from insightface.app import FaceAnalysis
import base64
from datetime import datetime
import configparser
import shutil

app = Flask(__name__)

class FaceRecognitionServer:
    def __init__(self):
        self.config_file = 'config.ini'
        self.config = self.load_config()
        self.threshold = float(self.config.get('Settings', 'threshold', fallback=0.5))
        
        # Initialize face analyzer
        self.face_analyzer = FaceAnalysis(
            name='buffalo_l',
            root='models',
            providers=['CUDAExecutionProvider', 'CPUExecutionProvider']
        )
        self.face_analyzer.prepare(ctx_id=0, det_size=(640, 640))
        
        # Load embeddings
        self.embeddings_file = 'Database/face_embeddings.pkl'
        self.face_db = self.load_embeddings()
        
        # Ensure directories exist
        os.makedirs("Get/In", exist_ok=True)
        os.makedirs("Get/Out", exist_ok=True)

    def load_config(self):
        config = configparser.ConfigParser()
        if not os.path.exists(self.config_file):
            config['Settings'] = {'threshold': '0.5'}
            with open(self.config_file, 'w') as f:
                config.write(f)
        else:
            config.read(self.config_file)
        return config

    def load_embeddings(self):
        if os.path.exists(self.embeddings_file):
            with open(self.embeddings_file, 'rb') as f:
                data = pickle.load(f)
                print(f"Loaded {len(data['embeddings'])} embeddings.")
                return data['embeddings']
        return {}

    def calculate_similarity(self, embedding1, embedding2):
        embedding1 = embedding1 / np.linalg.norm(embedding1)
        embedding2 = embedding2 / np.linalg.norm(embedding2)
        return float(np.dot(embedding1, embedding2))

    def save_image(self, img, folder, prefix):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{prefix}_{timestamp}.jpg"
        filepath = os.path.join(folder, filename)
        cv2.imwrite(filepath, img)
        return filename

    def recognize_face(self, image_data):
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Convert base64 to image
        nparr = np.frombuffer(base64.b64decode(image_data), np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if img is None:
            return {"status": "error", "message": "Invalid image data"}

        # Save input image
        input_filename = self.save_image(img, "Get/In", "input")

        # Convert to RGB for face analysis
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        faces = self.face_analyzer.get(img_rgb)

        if len(faces) == 0:
            # Read and use the placeholder UNRECOGNIZED.png
            unrecognized_img = cv2.imread("Database/UNRECOGNIZED.png")
            if unrecognized_img is None:
                return {
                    "status": "error",
                    "message": "UNRECOGNIZED.png placeholder not found",
                    "input_filename": input_filename
                }
                
            # Save unrecognized placeholder to Out folder
            output_filename = self.save_image(unrecognized_img, "Get/Out", "unrecognized")
            
            # Encode placeholder image for response
            _, buffer = cv2.imencode('.jpg', unrecognized_img)
            unrecognized_image_base64 = base64.b64encode(buffer).decode('utf-8')
            
            return {
                "status": "unrecognized", 
                "message": "No face detected",
                "input_filename": input_filename,
                "output_filename": output_filename,
                "matched_image": unrecognized_image_base64
            }

        query_embedding = faces[0].embedding

        # Find best match
        best_match = None
        best_similarity = -1

        for identity, data in self.face_db.items():
            similarity = self.calculate_similarity(query_embedding, data['embedding'])
            if similarity > best_similarity:
                best_match = data
                best_similarity = similarity

        if best_match and best_similarity > self.threshold:
            # Read matched image
            matched_image = cv2.imread(best_match['image_path'])
            
            # Save matched image to Out folder
            output_filename = self.save_image(matched_image, "Get/Out", "match")
            
            # Encode matched image for response
            _, buffer = cv2.imencode('.jpg', matched_image)
            matched_image_base64 = base64.b64encode(buffer).decode('utf-8')
            
            return {
                "status": "matched",
                "confidence": float(best_similarity),
                "matched_image": matched_image_base64,
                "input_filename": input_filename,
                "output_filename": output_filename,
                "matched_filename": os.path.basename(best_match['image_path'])
            }
        
        # No match found - use placeholder UNRECOGNIZED.png
        unrecognized_img = cv2.imread("Database/UNRECOGNIZED.png")
        if unrecognized_img is None:
            return {
                "status": "error",
                "message": "UNRECOGNIZED.png placeholder not found",
                "input_filename": input_filename
            }
            
        # Save unrecognized placeholder to Out folder
        output_filename = self.save_image(unrecognized_img, "Get/Out", "unrecognized")
        
        # Encode placeholder image for response
        _, buffer = cv2.imencode('.jpg', unrecognized_img)
        unrecognized_image_base64 = base64.b64encode(buffer).decode('utf-8')
        
        return {
            "status": "unrecognized", 
            "message": "No match found",
            "input_filename": input_filename,
            "output_filename": output_filename,
            "matched_image": unrecognized_image_base64
        }

# Initialize server
face_server = FaceRecognitionServer()

@app.route('/recognize', methods=['POST'])
def recognize():
    if 'image' not in request.json:
        return jsonify({"error": "No image data provided"}), 400
    
    result = face_server.recognize_face(request.json['image'])
    return jsonify(result)

@app.route('/reload_embeddings', methods=['POST'])
def reload_embeddings():
    face_server.face_db = face_server.load_embeddings()
    return jsonify({"status": "success", "message": "Embeddings reloaded"})

@app.route('/set_threshold', methods=['POST'])
def set_threshold():
    try:
        new_threshold = float(request.json['threshold'])
        if 0 <= new_threshold <= 1:
            face_server.threshold = new_threshold
            face_server.config.set('Settings', 'threshold', str(new_threshold))
            with open(face_server.config_file, 'w') as f:
                face_server.config.write(f)
            return jsonify({"status": "success", "message": f"Threshold set to {new_threshold}"})
    except (KeyError, ValueError):
        pass
    return jsonify({"error": "Invalid threshold value"}), 400

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3005)